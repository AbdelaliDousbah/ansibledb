---
apiVersion: v1
data:
  admin-password: YWRtaW4K (admin as an example)
  fid-password: Y2hhbmdlbWUK (changeme as an example)
kind: Secret
metadata:
  name: ansibledb
  namespace: ansibledb
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ansibledb
  name: ansibledb
  namespace: ansibledb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ansibledb
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: ansibledb
    spec:
      containers:
      - env:
        - name: MONGO_HOST
          value: mongodb
        - name: MONGO_USERNAME
          value: root
        - name: MONGO_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mongodb-root-password
              name: mongodb
        - name: MONGO_DATABASE
          value: ansibledb
        - name: MONGO_PORT
          value: "27017"
        - name: ADMIN_USERNAME
          value: admin
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: admin-password
              name: ansibledb
        #below LDAP variables
        #- name: LDAP_SERVER
        #  value: ldaps://AD_ldap_server:636
        #- name: LDAP_FID_USERNAME
        #  value: "CN=fid_ad_account,OU=Users,OU=OU Units,DC=company,DC=com"
        #- name: LDAP_FID_PASSWORD
        #  valueFrom:
        #    secretKeyRef:
        #      name: ansibledb
        #      key: fid-password
        #- name: LDAP_BASE_DN
        #  value: DC=company,DC=com
        #- name: LDAP_REQUIRED_GROUP
        #  value: CN=AD_GROUP,OU=Groups,OU=OU Units,DC=company,DC=com
        image: nbentoumi/ansibledb:0.1
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 25
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: http
          timeoutSeconds: 1
        name: ansibledb
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "2"
            memory: 2Gi
          requests:
            cpu: "1"
            memory: 1Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001000000
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1001000000
      serviceAccount: ansibledb
      serviceAccountName: ansibledb
      terminationGracePeriodSeconds: 30
---
# deployment on Openshift with route intead ingress
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: ansibledb
  namespace: ansibledb
  labels:
    app: ansibledb
spec:
  host: ansibledb.company.com
  path: /
  to:
    kind: Service
    name: ansibledb
    weight: 100
  port:
    targetPort: http
  tls:
    termination: edge
    certificate: "-----BEGIN CERTIFICATE-----\r\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa==\r\n-----END CERTIFICATE-----"
    key: |
      -----BEGIN RSA PRIVATE KEY-----
      xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      ...
      xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      -----END RSA PRIVATE KEY-----
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
status:
  ingress:
    - host: ansibledb.company.com
      routerName: default
      wildcardPolicy: None
      routerCanonicalHostname: router.openshift.company.com
---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-all
  namespace: ansibledb
spec:
  podSelector: {}
  ingress:
    - {}
  egress:
    - {}
  policyTypes:
    - Ingress
    - Egress
---
# deployment with ingress
---
apiVersion: v1
data:
    tls.crt: cert encrypted base64 here
    tls.key: key encrypted base64 here
kind: Secret
metadata:
    name: ansibledb-tls
    namespace: ansibledb
type: kubernetes.io/tls
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ansibledb
  namespace: ansibledb
spec:
  rules:
  - host: ansibledb.company.com
    http:
      paths:
      - backend:
          service:
            name: ansibledb
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - ansibledb.company.com
    secretName: ansibledb-tls
